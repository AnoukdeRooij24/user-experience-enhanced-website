{% render 'partials/head.liquid' %}

<p class="back">Back to <a href="/webinars">webinars</a></p>

<h1> {{ webdetail.title }} </h1>

{% if webdetail.video %}
    <video controls width="250">
        <source src="https://fdnd-agency.directus.app/assets/{{ webdetail.video }}" height="100px"/>
    </video>
{% endif %}

<section class="detail-watch-info">
    <p class="detail-vieuws"> <img src="/assets/views_icon.svg" alt=""> {{ webdetail.views }} </p>
    <p class="detail-date"> <img src="/assets/date_icon.svg" alt="">{{ webdetail.date }} </p>

    {% for category in webdetail.categories %}
        <p class="category-detail">{{ category.avl_categories_id.name }}</p>
    {% endfor %}
</section>

<section class="algemeen-description">
    <h2>Description</h2>
        <details class="description-detail">
            <summary>Read description</summary>
            <div>
                <p> {{ webdetail.description }} </p>
            </div>
        </details>
</section>

<section class="geheel-q-en-a">
    <h2>Q & A</h2>
        <h3>Comments</h3>
        <section class="comments-detail">
            {% for comment in comments %} 
                    <p class="comment"> {{  comment.content }}</p>
            {% endfor %}  
        </section>

        <h3>Ask a question</h3>
        <section class="q-en-a">
                <form action="/webinars/{{ webdetail.slug }}/{{ webdetail.id }}" method="post" data-enhanced="form-{{ webdetail.id }}">
                    <input type="text" name="comment" placeholder="Ask your question here..." />
                    <button type="submit" class="submit-button">Submit</button>
                </form>
        </section>
</section>

<section class="geheel-speaker">
    <h2>The speaker</h2>
        {% for speaker in webdetail.speakers %}
            <section class="speaker-detail">
                <!--
                    Layout shift:
                    Door de afbeeldingen in de liquid een afmeting mee te geven voorkom je een layout shift. Dit betekend dat de browser de ruimte
                    die de afbeelding 'waarschijnlijk' in gaat nemen al mee rekent met het inladen van de website, voordat de afbeelding zelf
                    is ingeladen.
                -->
                <img class="speaker-picture" src="https://fdnd-agency.directus.app/assets/{{ speaker.avl_speakers_id.profile_picture }}"     width="85px"    height="85px">
                <h3 class="speaker-name"> {{ speaker.avl_speakers_id.fullname }} </h3>
                <p class="speaker-job"> {{ speaker.avl_speakers_id.entitle }} </p>
            </section>
        {% endfor %}
</section>

<section class="geheel-transcript">
    <h2> Transcript </h2>
        <details class="transcript-detail">
            <summary>Read transcript</summary>
            <div>
                {% for transcript in webdetail.transcript %}
                    <p> {{ webdetail.transcript }} </p>
                    {% endfor %}
            </div>
        </details>
</section>

{% render 'partials/foot.liquid' %}


<script type="module">
// We maken hieronder aannames over wat de browser ondersteunt
// Dus laten we deze eerst testen met Feature Detection
// https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Testing/Feature_detection
if ('fetch' in window && 'DOMParser' in window) {

  // Als er ergens op de pagina een formulier wordt gesubmit..
  // (We maken hier gebruik van Event Delegation)
  document.addEventListener('submit', async function(event) {

    // Hou in een variabele bij welk formulier dat was
    const form = event.target

    // Als dit formulier geen data-enhanced attribuut heeft, doe dan niks
    // Dit doen we, zodat we sommige formulieren op de pagina kunnen 'enhancen'
    // Data attributen mag je zelf verzinnen; dit is dus niet iets speciaals
    // https://developer.mozilla.org/en-US/docs/Learn_web_development/Howto/Solve_HTML_problems/Use_data_attributes
    if (!form.hasAttribute('data-enhanced')) {
      return
    }

    // Voorkom de standaard submit van de browser
    // Let op: hiermee overschrijven we de default Loading state van de browser...
    event.preventDefault()

    let formButton = document.querySelector('.submit-button');

    formButton.classList.add("load-state");

    // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
    // Gebruik daarvoor het action en method attribuut van het originele formulier
    // Inclusief alle formulierelementen
    const response = await fetch(form.action, {
      method: form.method,
      body: new URLSearchParams(new FormData(form))
    })

    // De server redirect op de normale manier, en geeft HTML terug
    // (De server weet niet eens dat deze fetch via client-side JavaScript gebeurde)
    const responseText = await response.text()

    // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
    // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
    const parser = new DOMParser()
    const responseDOM = parser.parseFromString(responseText, 'text/html')

    // button voor de chatfunctie verwijderen
    // form.closest(".comments-form")?.remove()
    
    // Zoek in die nieuwe DOM onze nieuwe state op, die we via Liquid hebben klaargemaakt
    // We gebruiken hiervoor het data-enhanced attribuut, zodat we weten waar we naar moeten zoeken
    // (Hierdoor kunnen we ook meerdere formulieren op dezelfde pagina gebruiken)
    const newState = responseDOM.querySelector('[data-enhanced="' + form.getAttribute('data-enhanced') + '"]')

    // Overschrijf ons formulier met de nieuwe HTML
    // Hier wil je waarschijnlijk de Loading state vervangen door een Success state
    formButton.classList.remove("load-state");
    
    formButton.classList.add("succes-state");


    form.outerHTML = newState.outerHTML

  })
}
</script>

